
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.robertob.p1compi1.InputFileHandle;

import edu.robertob.p1compi1.Models.*;
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class InputFileParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public InputFileParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public InputFileParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public InputFileParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\003\000\002\004\006\000\002\005\005" +
    "\000\002\020\006\000\002\021\005\000\002\017\005\000" +
    "\002\011\007\000\002\011\007\000\002\023\002\000\002" +
    "\011\005\000\002\013\005\000\002\014\005\000\002\006" +
    "\003\000\002\007\003\000\002\022\004\000\002\022\004" +
    "\000\002\022\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\006\003\006\004\004\001\002\000\004\012" +
    "\055\001\002\000\004\002\054\001\002\000\004\002\ufffe" +
    "\001\002\000\010\003\uffee\004\uffee\006\uffee\001\002\000" +
    "\004\002\000\001\002\000\010\003\021\004\020\006\ufff1" +
    "\001\002\000\004\006\013\001\002\000\004\012\015\001" +
    "\002\000\004\002\uffff\001\002\000\004\005\016\001\002" +
    "\000\004\002\ufffc\001\002\000\010\003\ufff0\004\ufff0\006" +
    "\ufff0\001\002\000\006\013\033\014\034\001\002\000\004" +
    "\011\ufff6\001\002\000\010\003\uffee\004\uffee\006\uffee\001" +
    "\002\000\010\003\uffef\004\uffef\006\uffef\001\002\000\004" +
    "\006\026\001\002\000\010\003\ufff9\004\ufff9\006\ufff9\001" +
    "\002\000\004\014\027\001\002\000\004\005\030\001\002" +
    "\000\010\003\ufffa\004\ufffa\006\ufffa\001\002\000\004\011" +
    "\032\001\002\000\010\003\ufff5\004\ufff5\006\ufff5\001\002" +
    "\000\006\015\035\016\043\001\002\000\004\015\035\001" +
    "\002\000\004\007\040\001\002\000\004\005\037\001\002" +
    "\000\010\003\ufffb\004\ufffb\006\ufffb\001\002\000\004\017" +
    "\042\001\002\000\010\005\ufff4\011\ufff4\016\ufff4\001\002" +
    "\000\012\005\ufff2\011\ufff2\015\ufff2\016\ufff2\001\002\000" +
    "\004\007\052\001\002\000\004\016\043\001\002\000\004" +
    "\015\035\001\002\000\004\011\047\001\002\000\010\003" +
    "\ufff7\004\ufff7\006\ufff7\001\002\000\004\011\051\001\002" +
    "\000\010\003\ufff8\004\ufff8\006\ufff8\001\002\000\004\017" +
    "\042\001\002\000\006\011\ufff3\015\ufff3\001\002\000\004" +
    "\002\001\001\002\000\004\015\035\001\002\000\004\005" +
    "\057\001\002\000\010\003\ufffd\004\ufffd\006\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\010\002\004\003\007\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\011\022\010\001\001\000\002\001\001\000\010\011" +
    "\016\017\022\020\021\001\001\000\004\005\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\030\001\001\000\006\007\023\022\010\001\001\000" +
    "\002\001\001\000\004\021\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\043\014\044" +
    "\001\001\000\004\013\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\047\001\001\000\004\013\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\055\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$InputFileParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$InputFileParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$InputFileParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Project project;
    private DirectoryItem currentDirectory;
    private Stack<DirectoryItem> directoryStack = new Stack<>();

    public Project getProject() {
        return project;
    }

    public InputFileParser(InputFileLexer lexer) {
        super(lexer);
    }

    protected int error_sync_size() {
        return 10;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$InputFileParser$actions {
  private final InputFileParser parser;

  /** Constructor */
  CUP$InputFileParser$actions(InputFileParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$InputFileParser$do_action_part00000000(
    int                        CUP$InputFileParser$act_num,
    java_cup.runtime.lr_parser CUP$InputFileParser$parser,
    java.util.Stack            CUP$InputFileParser$stack,
    int                        CUP$InputFileParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$InputFileParser$result;

      /* select the action based on the action number */
      switch (CUP$InputFileParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).value;
		RESULT = start_val;
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$InputFileParser$parser.done_parsing();
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= project 
            {
              Object RESULT =null;
		 RESULT = project; 
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // project ::= project_open_tag content project_close_tag 
            {
              Object RESULT =null;
		 RESULT = project; 
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("project",1, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // project ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.peek()).value;
		System.out.println("Error: " + e); 
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("project",1, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // project_open_tag ::= TAG_OPEN TAG_NAME_PROJECT name_attribute TAG_CLOSE 
            {
              Object RESULT =null;
		int projNameleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).left;
		int projNameright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).right;
		Object projName = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).value;
		
        System.out.println("Project name: " + (String)projName);
        project = new Project((String)projName);
        currentDirectory = project.getContent();
     
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("project_open_tag",2, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // project_close_tag ::= TAG_CLOSE_REVERSE TAG_NAME_PROJECT TAG_CLOSE 
            {
              Object RESULT =null;

              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("project_close_tag",3, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // directory_open_tag ::= TAG_OPEN TAG_NAME_FOLDER name_attribute TAG_CLOSE 
            {
              Object RESULT =null;
		int folderNameleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).left;
		int folderNameright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).right;
		Object folderName = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).value;
		
    System.out.println("Folder name: " + folderName);
    DirectoryItem newDir = new DirectoryItem((String)folderName, new ArrayList<>());
            currentDirectory.getContent().add(newDir);
            directoryStack.push(currentDirectory);
            System.out.println("test");
            currentDirectory = newDir;
            RESULT = folderName;
    
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("directory_open_tag",14, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // directory_close_tag ::= TAG_CLOSE_REVERSE TAG_NAME_FOLDER TAG_CLOSE 
            {
              Object RESULT =null;
		 currentDirectory = directoryStack.pop(); 
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("directory_close_tag",15, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // directory_tag ::= directory_open_tag content directory_close_tag 
            {
              Object RESULT =null;
		int dirNameleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).left;
		int dirNameright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).right;
		Object dirName = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).value;
		

    
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("directory_tag",13, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // file_tag ::= TAG_OPEN TAG_NAME_FILE name_attribute location_attribute TAG_SELF_CLOSE 
            {
              Object RESULT =null;
		int nameAttrleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).left;
		int nameAttrright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).right;
		Object nameAttr = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).value;
		int locationAttrleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).left;
		int locationAttrright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).right;
		Object locationAttr = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).value;
		 System.out.println("File name: " + nameAttr + ", location: " + locationAttr);
    currentDirectory.getContent().add(new FileItem((String)nameAttr, (String)locationAttr));
     
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("file_tag",7, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // file_tag ::= TAG_OPEN TAG_NAME_FILE location_attribute name_attribute TAG_SELF_CLOSE 
            {
              Object RESULT =null;
		int locationAttrleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).left;
		int locationAttrright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).right;
		Object locationAttr = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).value;
		int nameAttrleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).left;
		int nameAttrright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).right;
		Object nameAttr = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).value;
		 System.out.println("File name: " + nameAttr + ", location: " + locationAttr);
    currentDirectory.getContent().add(new FileItem((String)nameAttr, (String)locationAttr));
    
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("file_tag",7, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.peek()).value;
 System.out.println("Error"+eleft); 
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // file_tag ::= error NT$0 TAG_SELF_CLOSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)).value;

              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("file_tag",7, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // name_attribute ::= TAG_ATTRIBUTE_NAME EQUALS attribute_value 
            {
              Object RESULT =null;
		int attrValueleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()).left;
		int attrValueright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()).right;
		Object attrValue = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.peek()).value;
		 RESULT = attrValue; 
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("name_attribute",9, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // location_attribute ::= TAG_ATTRIBUTE_LOCATION EQUALS attribute_value 
            {
              Object RESULT =null;
		int attrValueleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()).left;
		int attrValueright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()).right;
		Object attrValue = (Object)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.peek()).value;
		 RESULT = attrValue; 
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("location_attribute",10, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // attribute_value ::= TAG_ATTRIBUTE_VALUE 
            {
              Object RESULT =null;
		int attrValueleft = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()).left;
		int attrValueright = ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()).right;
		String attrValue = (String)((java_cup.runtime.Symbol) CUP$InputFileParser$stack.peek()).value;
		 RESULT = attrValue.substring(1,  attrValue.length() - 1); 
              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("attribute_value",4, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // content ::= file_or_folder_list 
            {
              Object RESULT =null;

              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("content",5, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // file_or_folder_list ::= file_or_folder_list file_tag 
            {
              Object RESULT =null;

              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("file_or_folder_list",16, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // file_or_folder_list ::= file_or_folder_list directory_tag 
            {
              Object RESULT =null;

              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("file_or_folder_list",16, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.elementAt(CUP$InputFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // file_or_folder_list ::= 
            {
              Object RESULT =null;

              CUP$InputFileParser$result = parser.getSymbolFactory().newSymbol("file_or_folder_list",16, ((java_cup.runtime.Symbol)CUP$InputFileParser$stack.peek()), RESULT);
            }
          return CUP$InputFileParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$InputFileParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$InputFileParser$do_action(
    int                        CUP$InputFileParser$act_num,
    java_cup.runtime.lr_parser CUP$InputFileParser$parser,
    java.util.Stack            CUP$InputFileParser$stack,
    int                        CUP$InputFileParser$top)
    throws java.lang.Exception
    {
              return CUP$InputFileParser$do_action_part00000000(
                               CUP$InputFileParser$act_num,
                               CUP$InputFileParser$parser,
                               CUP$InputFileParser$stack,
                               CUP$InputFileParser$top);
    }
}

}

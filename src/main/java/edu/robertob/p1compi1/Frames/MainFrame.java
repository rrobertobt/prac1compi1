/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.robertob.p1compi1.Frames;

import edu.robertob.p1compi1.Models.InputFileController;
import edu.robertob.p1compi1.Models.InputFileHandler;
import edu.robertob.p1compi1.Models.Project;
import edu.robertob.p1compi1.Utils.ProjectUtils;

import javax.swing.*;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;

import static edu.robertob.p1compi1.Utils.ProjectUtils.writeToFile;

/**
 *
 * @author robertob
 */
public class MainFrame extends javax.swing.JFrame {
    
    InputFileController inputFileController;
    Boolean projectLoaded = false;
    final JOptionPane addDirectoryOptionPane = new JOptionPane();
    Project currentProject;


    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.inputFileController = new InputFileController();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        selectFileMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("No hay projecto cargado");

        jMenu1.setText("Archivo");

        selectFileMenuItem.setText("Cargar archivo de entrada (.ide)");
        selectFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(selectFileMenuItem);

        jMenuItem1.setText("Nuevo proyecto");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(322, 322, 322)
                .addComponent(jLabel1)
                .addContainerGap(335, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(274, 274, 274)
                .addComponent(jLabel1)
                .addContainerGap(342, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void updateProjectTree () {

    }
    private void selectFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileMenuItemActionPerformed
        var result = inputFileController.parseInputFile();
        System.out.println("Result: " + result);
        if (result != null) {

            this.getContentPane().removeAll();
            this.repaint();
            this.projectLoaded = true;
            this.currentProject = result;
            // add MainPanel
            MainPanel mainPanel = new MainPanel(this.currentProject);
            mainPanel.getjTree1().setModel(new DefaultTreeModel(ProjectUtils.getProjectTree(result.getContent().getContent(), result)));

            this.getContentPane().add(mainPanel);
            mainPanel.setSize(800, 600);
            mainPanel.setVisible(true);
            this.validate();
            this.repaint();

        } else {
            // show a message dialog
            JOptionPane.showMessageDialog(this, "No se ha cargado ningun archivo", "Información", JOptionPane.INFORMATION_MESSAGE);

            // before removing the main panel, check if there is already open a valid project so we don't remove it
            if (this.projectLoaded) return;

            this.getContentPane().removeAll();
            this.repaint();
            // create new label
            JLabel label = new JLabel("No hay projecto cargado");
            label.setHorizontalAlignment(JLabel.CENTER);
            label.setVerticalAlignment(JLabel.CENTER);
            label.setSize(500, 300);
            this.getContentPane().add(label);
            this.validate();
        }
    }//GEN-LAST:event_selectFileMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String name = JOptionPane.showInputDialog(this, "Nombre del proyecto", "Nuevo proyecto", JOptionPane.QUESTION_MESSAGE);
        if(name == null) return;
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre del proyecto no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // create new project content with only the root directory and the name from the input
        String emptyProjectContentForFile = "<PROYECTO nombre=\"" + name + "\">\n" +
                "    <CARPETA nombre=\"Carpeta base\">\n" +
                "    </CARPETA>\n" +
                "</PROYECTO>";
        // ask the user to select a directory to save the file
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccione la carpeta donde guardar el archivo");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.showSaveDialog(this);
        String path = fileChooser.getCurrentDirectory().getAbsolutePath().concat("/").concat(name).concat(".ide");
        ProjectUtils.writeToFile(path, emptyProjectContentForFile);

    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem selectFileMenuItem;
    // End of variables declaration//GEN-END:variables
}
